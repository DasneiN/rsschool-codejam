var assert = require('assert');
Object.freeze(assert);
const sumOfOther = require('../sumOfOther.js');
const make = require('../make.js');
const recursion = require('../recursion.js');

describe('rsschool-codejam tests', function () {
  
  describe('sumOfOther() – should return array that every its element is a sum of others', function () {

    it('[2, 3, 4, 1]', function () {
      assert.deepEqual(sumOfOther([2, 3, 4, 1]), [8, 7, 6, 9]);
    });

    it('[81, 54, 73, 27, 71, 42, 38, 6, 4, 96]', function () {
      assert.deepEqual(sumOfOther([81, 54, 73, 27, 71, 42, 38, 6, 4, 96]), [411, 438, 419, 465, 421, 450, 454, 486, 488, 396]);
    });

    it('[95, 2, 54, 87, 86, 97]', function () {
      assert.deepEqual(sumOfOther([95, 2, 54, 87, 86, 97]), [326, 419, 367, 334, 335, 324]);
    });

    it('[152, 208, 197, 594, 25, 325, 269, 116, 124, 313, 267, 227, 496, 543, 403, 115, 430]', function () {
      assert.deepEqual(sumOfOther([152, 208, 197, 594, 25, 325, 269, 116, 124, 313, 267, 227, 496, 543, 403, 115, 430]), [4652, 4596, 4607, 4210, 4779, 4479, 4535, 4688, 4680, 4491, 4537, 4577, 4308, 4261, 4401, 4689, 4374]);
    });

    it('[2579, 2961, 3111, 63, 1159, 2978, 4064, 1231, 3455, 3797, 2040, 2834, 2475, 1011, 1010, 1335, 1424, 1816, 1137, 311, 4073, 2531, 1047, 3172, 3985, 2047, 1718, 370, 3472, 4068, 502, 3435, 1113, 563, 3287, 3336, 2160, 2502, 1817, 156, 1723, 1573, 2958, 2673, 3743, 2873, 603, 2788, 2321, 946, 1819, 2997, 1140, 135, 880, 1314, 2277, 2399, 3017, 482, 3841, 1528, 766, 2450, 340, 1498]', function () {
      assert.deepEqual(sumOfOther([2579, 2961, 3111, 63, 1159, 2978, 4064, 1231, 3455, 3797, 2040, 2834, 2475, 1011, 1010, 1335, 1424, 1816, 1137, 311, 4073, 2531, 1047, 3172, 3985, 2047, 1718, 370, 3472, 4068, 502, 3435, 1113, 563, 3287, 3336, 2160, 2502, 1817, 156, 1723, 1573, 2958, 2673, 3743, 2873, 603, 2788, 2321, 946, 1819, 2997, 1140, 135, 880, 1314, 2277, 2399, 3017, 482, 3841, 1528, 766, 2450, 340, 1498]), [132650, 132268, 132118, 135166, 134070, 132251, 131165, 133998, 131774, 131432, 133189, 132395, 132754, 134218, 134219, 133894, 133805, 133413, 134092, 134918, 131156, 132698, 134182, 132057, 131244, 133182, 133511, 134859, 131757, 131161, 134727, 131794, 134116, 134666, 131942, 131893, 133069, 132727, 133412, 135073, 133506, 133656, 132271, 132556, 131486, 132356, 134626, 132441, 132908, 134283, 133410, 132232, 134089, 135094, 134349, 133915, 132952, 132830, 132212, 134747, 131388, 133701, 134463, 132779, 134889, 133731]);
    });

  });

  describe('make() – should return array that was processed by function', function () {

    let sum = function(a, b) {
      return a + b;
    }
    
    it('make(97)(40)(47)(sum)', function () {
      assert.deepEqual(make(97)(40)(47)(sum), 184);
    });
    
    it('make(74)(72)(21)(22)(37)(25)(58)(44)(88)(99)(85)(1)(37)(22)(16)(37)(50)(34)(48)(88)(80)(0)(60)(58)(43)(23)(69)(7)(53)(10)(24)(80)(90)(50)(84)(53)(81)(7)(5)(31)(74)(52)(44)(16)(5)(18)(56)(22)(47)(13)(38)(98)(35)(49)(sum)', function () {
      assert.deepEqual(make(74)(72)(21)(22)(37)(25)(58)(44)(88)(99)(85)(1)(37)(22)(16)(37)(50)(34)(48)(88)(80)(0)(60)(58)(43)(23)(69)(7)(53)(10)(24)(80)(90)(50)(84)(53)(81)(7)(5)(31)(74)(52)(44)(16)(5)(18)(56)(22)(47)(13)(38)(98)(35)(49)(sum), 2433);
    });

    it('make(66)(83)(64)(7)(17)(53)(83)(18)(32)(4)(11)(93)(46)(65)(52)(72)(74)(67)(91)(53)(99)(40)(46)(sum)', function () {
      assert.deepEqual(make(66)(83)(64)(7)(17)(53)(83)(18)(32)(4)(11)(93)(46)(65)(52)(72)(74)(67)(91)(53)(99)(40)(46)(sum), 1236);
    });

    it('make(40)(9)(84)(16)(26)(9)(26)(92)(45)(13)(92)(17)(21)(70)(73)(1)(89)(83)(94)(15)(50)(54)(87)(74)(30)(65)(22)(4)(59)(88)(37)(36)(0)(42)(35)(1)(39)(sum)', function () {
      assert.deepEqual(make(40)(9)(84)(16)(26)(9)(26)(92)(45)(13)(92)(17)(21)(70)(73)(1)(89)(83)(94)(15)(50)(54)(87)(74)(30)(65)(22)(4)(59)(88)(37)(36)(0)(42)(35)(1)(39)(sum), 1638);
    });

    it('make(10)(41)(6)(82)(38)(49)(89)(99)(55)(24)(24)(28)(62)(88)(84)(87)(sum)', function () {
      assert.deepEqual(make(10)(41)(6)(82)(38)(49)(89)(99)(55)(24)(24)(28)(62)(88)(84)(87)(sum), 866);
    });

  });
  
  describe('recursion() – should return array that contains binary tree elements', function () {

    it('tree #1', function () {
      let tree = { "value": 68, "left": { "value": 33, "left": { "value": 28 }, "right": { "value": 43 } }, "right": { "value": 75, "left": { "value": 99 }, "right": { "value": 19 } } };
      let answer = [[68], [33, 75], [28, 43, 99, 19]];
      assert.deepEqual(recursion(tree), answer);
    });

    it('tree #2', function () {
      let tree = { "value": 11, "left": { "value": 78, "left": { "value": 26 }, "right": { "value": 93 } }, "right": { "value": 10, "left": { "value": 24 }, "right": { "value": 94 } } };
      let answer = [[11], [78, 10], [26, 93, 24, 94]];
      assert.deepEqual(recursion(tree), answer);
    });

    it('tree #3', function () {
      let tree = { "value": 48, "left": { "value": 2, "left": { "value": 68 }, "right": { "value": 39 } }, "right": { "value": 16, "left": { "value": 25 }, "right": { "value": 4 } } };
      let answer = [[48], [2, 16], [68, 39, 25, 4]];
      assert.deepEqual(recursion(tree), answer);
    });

    it('tree #4', function () {
      let tree = { "value": 39, "left": { "value": 23, "left": { "value": 87 }, "right": { "value": 79 } }, "right": { "value": 95, "left": { "value": 73 }, "right": { "value": 68 } } };
      let answer = [[39], [23, 95], [87, 79, 73, 68]];
      assert.deepEqual(recursion(tree), answer);
    });

    it('tree #5', function () {
      let tree = { "value": 56, "left": { "value": 49, "left": { "value": 33 }, "right": { "value": 81 } }, "right": { "value": 83, "left": { "value": 53 }, "right": { "value": 9 } } };
      let answer = [[56], [49, 83], [33, 81, 53, 9]];
      assert.deepEqual(recursion(tree), answer);
    });

  });
  
});